#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ submission.csv –Ω–∞ –æ—Å–Ω–æ–≤–µ test.csv
—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞–∂–¥—ã–µ 15 –∑–∞–ø—Ä–æ—Å–æ–≤.
"""

import csv
import asyncio
import json
import time
import threading
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime
import re

import click
import httpx
import docker
from tqdm import tqdm

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
last_method = ""
last_url = ""
monitoring_active = True
request_counter = 0

def clean_url(url: str) -> str:
    """–û—á–∏—â–∞–µ—Ç URL –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞ https://api.finam.ru"""
    if url.startswith("https://api.finam.ru"):
        return url.replace("https://api.finam.ru", "")
    return url

class LogMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self):
        self.client = docker.from_env()
        self.requests_log: List[Dict[str, Any]] = []
        
    def monitor_mcp_server_logs(self, container_name: str = "mcp-server2"):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        global last_method, last_url, monitoring_active
        
        try:
            container = self.client.containers.get(container_name)
            print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {container_name}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            for line in container.logs(stream=True, follow=True):
                if not monitoring_active:
                    break
                    
                line = line.decode('utf-8').strip()
                self._process_log_line(line)
                
        except docker.errors.NotFound:
            print(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
    def _process_log_line(self, line: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        global last_method, last_url
        
        if "MAKING REQUEST:" in line:
            print(f"üì° –ù–ê–ô–î–ï–ù –ó–ê–ü–†–û–°: {line}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥ –∏ URL
            match = re.search(r"MAKING REQUEST: (\w+) (https?://[^\s]+)", line)
            if match:
                original_url = match.group(2)
                cleaned_url = clean_url(original_url)
                
                request_data = {
                    'timestamp': datetime.now().isoformat(),
                    'method': match.group(1),
                    'url': cleaned_url,
                    'original_url': original_url,
                    'full_log': line
                }
                self.requests_log.append(request_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                last_method = request_data['method']
                last_url = request_data['url']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π URL
                print(f"üéØ –ú–µ—Ç–æ–¥: {last_method}, URL: {last_url}")
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        method_counts = {}
        for req in self.requests_log:
            method_counts[req['method']] = method_counts.get(req['method'], 0) + 1
            
        return {
            'total_requests': len(self.requests_log),
            'method_counts': method_counts,
            'requests': self.requests_log
        }

class DockerManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.client = docker.from_env()
        
    def start_containers(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ docker-compose"""
        import subprocess
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            commands = [
                ["docker", "compose", "up", "-d"],
                ["docker-compose", "up", "-d"]
            ]
            
            for cmd in commands:
                try:
                    result = subprocess.run(
                        cmd,
                        cwd=Path(__file__).parent,
                        capture_output=True,
                        text=True,
                        timeout=60
                    )
                    if result.returncode == 0:
                        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã")
                        return True
                except (FileNotFoundError, subprocess.TimeoutExpired):
                    continue
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
            
    def stop_containers(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        import subprocess
        try:
            commands = [
                ["docker", "compose", "down"],
                ["docker-compose", "down"]
            ]
            
            for cmd in commands:
                try:
                    subprocess.run(cmd, cwd=Path(__file__).parent, timeout=30)
                    break
                except FileNotFoundError:
                    continue
                    
            print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    def restart_containers(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        self.stop_containers()
        time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        success = self.start_containers()
        if success:
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (10 —Å–µ–∫—É–Ω–¥)...")
            time.sleep(10)
        return success

class AIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI –∞–≥–µ–Ω—Ç–æ–º"""
    
    def __init__(self, base_url: str = "http://localhost:8003"):
        self.base_url = base_url
        
    async def ask_question(self, question: str, uid: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ AI –∞–≥–µ–Ω—Ç—É"""
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.base_url}/generate_str",
                    json={"prompt": question}
                )
                print(f"üì® –û—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è {uid}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI –∞–≥–µ–Ω—Ç—É: {e}")

async def process_questions(
    test_questions: List[Dict[str, str]],
    output_file: Path,
    docker_manager: DockerManager,
    log_monitor: LogMonitor
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 15 –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    global request_counter, monitoring_active
    
    ai_client = AIClient()
    results = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞–∂–¥—ã–µ 15 –∑–∞–ø—Ä–æ—Å–æ–≤
    for i, item in enumerate(tqdm(test_questions, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            if i > 0 and i % 15 == 0:
                print(f"\nüîÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ {i} –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                monitoring_active = False
                time.sleep(2)
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                if not docker_manager.restart_containers():
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                monitoring_active = True
                monitoring_thread = start_log_monitoring(log_monitor)
                time.sleep(3)
                
                print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å AI –∞–≥–µ–Ω—Ç—É
            await ai_client.ask_question(
                question=item["question"],
                uid=item["uid"]
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            request_counter += 1
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥ –∏ URL (—É–∂–µ –æ—á–∏—â–µ–Ω–Ω—ã–π)
            current_method = last_method if last_method else "GET"
            current_url = last_url if last_url else ""
            
            results.append({
                "uid": item["uid"],
                "type": current_method,
                "request": current_url
            })
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –≤–æ–ø—Ä–æ—Å {item['uid']} ({i+1}/{len(test_questions)}): {current_method} {current_url}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ {item['uid']}: {e}")
            results.append({
                "uid": item["uid"],
                "type": "error",
                "request": ""
            })
    
    return results

def start_log_monitoring(log_monitor: LogMonitor):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def monitoring_thread():
        log_monitor.monitor_mcp_server_logs()
    
    thread = threading.Thread(target=monitoring_thread, daemon=True)
    thread.start()
    return thread

@click.command()
@click.option(
    "--test-file",
    type=click.Path(exists=True, path_type=Path),
    default="../data/processed/test.csv",
    help="–ü—É—Ç—å –∫ test.csv",
)
@click.option(
    "--output-file", 
    type=click.Path(path_type=Path),
    default="submission.csv",
    help="–ü—É—Ç—å –∫ submission.csv",
)
@click.option(
    "--keep-containers",
    is_flag=True,
    help="–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
)
@click.option(
    "--restart-interval",
    type=int,
    default=15,
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤",
)
def main(test_file: Path, output_file: Path, keep_containers: bool, restart_interval: int) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission.csv —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π"""
    global monitoring_active
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    docker_manager = DockerManager()
    log_monitor = LogMonitor()
    
    try:
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        click.echo("üöÄ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        if not docker_manager.start_containers():
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã")
            return
            
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        click.echo("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (15 —Å–µ–∫—É–Ω–¥)...")
        time.sleep(15)
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        click.echo("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...")
        monitoring_thread = start_log_monitoring(log_monitor)
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        time.sleep(3)
        
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        click.echo(f"üìñ –ß—Ç–µ–Ω–∏–µ {test_file}...")
        test_questions = []
        try:
            with open(test_file, encoding="utf-8") as f:
                reader = csv.DictReader(f, delimiter=";")
                for row in reader:
                    test_questions.append({
                        "uid": row["uid"], 
                        "question": row["question"]
                    })
            click.echo(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        except Exception as e:
            click.echo(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
        click.echo(f"\nü§ñ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞–∂–¥—ã–µ {restart_interval} –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        results = asyncio.run(process_questions(test_questions, output_file, docker_manager, log_monitor))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        click.echo(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {output_file}...")
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, "w", encoding="utf-8", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=["uid", "type", "request"], delimiter=";")
            writer.writeheader()
            writer.writerows(results)
        
        # –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
        metrics = log_monitor.get_metrics()
        click.echo(f"\nüìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ API –≤—ã–∑–æ–≤–æ–≤:")
        click.echo(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['total_requests']}")
        for method, count in metrics['method_counts'].items():
            click.echo(f"   {method}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–≤–µ—Ç–æ–≤
        type_counts = {}
        for r in results:
            type_counts[r["type"]] = type_counts.get(r["type"], 0) + 1
        
        click.echo(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–≤–µ—Ç–æ–≤:")
        for method, count in sorted(type_counts.items()):
            click.echo(f"   {method}: {count}")
            
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        metrics_file = output_file.parent / "api_metrics.json"
        with open(metrics_file, "w", encoding="utf-8") as f:
            json.dump(metrics, f, indent=2, ensure_ascii=False)
        click.echo(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {metrics_file}")
        
        click.echo(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –≤ {output_file}")
        
    except KeyboardInterrupt:
        click.echo("\nüõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        click.echo(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_active = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
        if not keep_containers:
            click.echo("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
            docker_manager.stop_containers()

if __name__ == "__main__":
    main()