#!/usr/bin/env python3
# -*- coding: utf-8 -*-


from __future__ import annotations

import asyncio
import json
import os
from typing import Any, Dict, Optional, Tuple

import httpx
import streamlit as st

#  –ò–º–ø–æ—Ä—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π 
try:
    from src.app.interfaces.viz import render_visualization  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
except Exception:
    import sys
    here = os.path.dirname(os.path.abspath(__file__))
    for p in [
        os.path.abspath(os.path.join(here, "..", "..")),      # /src/app
        os.path.abspath(os.path.join(here, "..", "..", "..")) # /src
    ]:
        if p not in sys.path:
            sys.path.insert(0, p)
    try:
        from src.app.interfaces.viz import render_visualization  # type: ignore
    except Exception:
        from viz import render_visualization  # type: ignore

DEFAULT_MCP_AGENT_URL = os.environ.get("MCP_AGENT_URL", "http://mcp-agent:8003/generate_str")

# HELP

def build_system_prompt() -> str:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–æ–¥–µ–ª–∏. –í–∞–∂–Ω–æ–µ: –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å VISUALIZE –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤/—Ç–∞–±–ª–∏—Ü."""
    return (
        "–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π:\n"
        "1) –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É, –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–π –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–ª–æ–∫:\n"
        "VISUALIZE:\n"
        "{\n"
        '  "type": "<candlestick|line|bar|scatter|pie|heatmap|orderbook|table>",\n'
        '  "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫",\n'
        '  "data": [ { ... } ],\n'
        '  "x": "–∏–º—è_–ø–æ–ª—è_–ø–æ_X",\n'
        '  "y": "–∏–º—è_–ø–æ–ª—è_–ø–æ_Y",\n'
        '  "open": "open", "high": "high", "low": "low", "close": "close",\n'
        '  "options": { "height": 520 }\n'
        "}\n"
        "2) –î–ª—è —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—ã–ª–∞–π –ü–õ–û–°–ö–ò–ï —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö {\"value\":...}).\n"
        "3) –î–ª—è —Å—Ç–∞–∫–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π: bids=[[price,size],...], asks=[[price,size],...].\n"
        "4) –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ (—Ñ—Ä–æ–Ω—Ç –Ω–µ –¥–µ–ª–∞–µ—Ç –¥–æ–ø. –∑–∞–ø—Ä–æ—Å–æ–≤).\n"
        "5) –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —Å–ø–µ—Ä–≤–∞ –≤—ã–∑–æ–≤–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (viz_candles, viz_orderbook, viz_latest_trades).\n"
        "   –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –±–∏—Ä–∂—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π mic='MISX' –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤ MOEX.\n"
        "   –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤–µ—Ä–Ω–∏ –µ—ë –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–æ–¥/—Å–æ–æ–±—â–µ–Ω–∏–µ).\n"
    )

def _extract_text_from_response(resp: httpx.Response) -> str:
    """–î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ mcp-agent (–ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)."""
    try:
        data = resp.json()
    except Exception:
        return resp.text
    if isinstance(data, str):
        return data
    if isinstance(data, dict):
        for k in ("result", "message", "content", "text", "output"):
            v = data.get(k)
            if isinstance(v, str):
                return v
        return json.dumps(data, ensure_ascii=False, indent=2)
    return str(data)

def _find_first_json_object(text: str) -> Tuple[Optional[int], Optional[int]]:
    """–ò—â–µ–º –ø–µ—Ä–≤—ã–π –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô JSON-–æ–±—ä–µ–∫—Ç { ... } –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (start, end)."""
    if not text:
        return None, None
    start = text.find("{")
    while start != -1:
        depth, in_str, esc = 0, False, False
        for i in range(start, len(text)):
            ch = text[i]
            if in_str:
                if esc:
                    esc = False
                elif ch == "\\":
                    esc = True
                elif ch == '"':
                    in_str = False
                continue
            if ch == '"':
                in_str = True
            elif ch == "{":
                depth += 1
            elif ch == "}":
                depth -= 1
                if depth == 0:
                    return start, i + 1
        start = text.find("{", start + 1)
    return None, None

def _extract_visualize_block(text: str) -> Optional[Dict[str, Any]]:
    """–î–æ—Å—Ç–∞—ë–º –ü–ï–†–í–´–ô JSON –ø–æ—Å–ª–µ 'VISUALIZE:' (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)."""
    if not text:
        return None
    pos = text.upper().find("VISUALIZE:")
    if pos == -1:
        return None
    tail = text[pos + len("VISUALIZE:") :]
    s, e = _find_first_json_object(tail)
    if s is None or e is None:
        return None
    try:
        return json.loads(tail[s:e])
    except Exception:
        return None

def _extract_any_json_spec(text: str) -> Optional[Dict[str, Any]]:
    """–§–æ–ª–±—ç–∫: –¥–æ—Å—Ç–∞—ë–º –ø–µ—Ä–≤—ã–π JSON-–æ–±—ä–µ–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω–µ—Ç VISUALIZE)."""
    s, e = _find_first_json_object(text or "")
    if s is None or e is None:
        return None
    try:
        return json.loads(text[s:e])
    except Exception:
        return None

def _strip_visualize_json(text: str) -> str:
    """–£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ JSON, —Å–ª–µ–¥—É—é—â–∏–π —Å—Ä–∞–∑—É –∑–∞ 'VISUALIZE:'."""
    if not text:
        return text
    pos = text.upper().find("VISUALIZE:")
    if pos == -1:
        return text
    head, tail = text[:pos], text[pos + len("VISUALIZE:") :]
    s, e = _find_first_json_object(tail)
    if s is None or e is None:
        return text
    # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º 'VISUALIZE:' –∏ —Å–∞–º JSON
    return (head + tail[:s] + tail[e:]).replace("VISUALIZE:", "").strip()

def _strip_first_json(text: str) -> str:
    """–£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π JSON-–æ–±—ä–µ–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —Ñ–æ–ª–±—ç–∫–∞)."""
    s, e = _find_first_json_object(text or "")
    if s is None or e is None:
        return text
    return (text[:s] + text[e:]).strip()

def _normalize_visual_spec(spec: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º —Å–ø–µ–∫—É –∫ —Ñ–æ—Ä–º–∞—Ç—É, –ø–æ–Ω—è—Ç–Ω–æ–º—É —Ä–µ–Ω–¥–µ—Ä–∞–º:
    - –°–≤–µ—á–∏: —Å—Ç—Ä–æ–∫–∏/{"value":"‚Ä¶"} ‚Üí float; –µ—Å–ª–∏ –Ω–µ—Ç time ‚Äî x='__idx'.
    """
    if not isinstance(spec, dict):
        return spec
    t = (spec.get("type") or "").lower()
    if t in ("candlestick", "ohlc") and isinstance(spec.get("data"), list):
        have_time = False
        for idx, row in enumerate(spec["data"]):
            # –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—ã–µ OHLC
            for k in ("open", "high", "low", "close"):
                v = row.get(k)
                if isinstance(v, dict) and "value" in v:
                    v = v["value"]
                if isinstance(v, str):
                    try:
                        v = float(v.replace(",", "."))
                    except Exception:
                        pass
                row[k] = v
            if row.get("time") is not None:
                have_time = True
            else:
                row["__idx"] = idx
        if not have_time:
            spec["x"] = spec.get("x") or "__idx"
    return spec

def _parse_or_extract_visual_spec(text: str) -> Tuple[str, Optional[Dict[str, Any]]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π:
    1) –ü—Ä–æ–±—É–µ–º –ü–ï–†–í–´–ô JSON –ø–æ—Å–ª–µ 'VISUALIZE:'.
    2) –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π ¬´–≥–æ–ª—ã–π JSON¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (display_text, viz_spec).
    """
    spec = _extract_visualize_block(text)
    if spec:
        return _strip_visualize_json(text), _normalize_visual_spec(spec)

    cand = _extract_any_json_spec(text)
    if isinstance(cand, dict) and cand.get("type"):
        return _strip_first_json(text), _normalize_visual_spec(cand)

    return text, None



async def main() -> None:
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", page_icon="ü§ñ", layout="wide")
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞")
    st.caption("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ (Plotly + Streamlit).")

    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        mcp_url = st.text_input(
            "MCP Agent URL",
            value=DEFAULT_MCP_AGENT_URL,
            help="–≠–Ω–¥–ø–æ–∏–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é mcp-agent:8003/generate_str)",
        )
        use_system_prompt = st.checkbox(
            "–î–æ–±–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
            value=True,
            help="–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô VISUALIZE –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤/—Ç–∞–±–ª–∏—Ü",
        )
        st.markdown("---")
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.rerun()
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã:")
        st.markdown(
            "- –ù–∞—Ä–∏—Å—É–π —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ **SBER** –∑–∞ 2 –º–µ—Å—è—Ü–∞ (–≤–µ—Ä–Ω–∏ VISUALIZE).\n"
            "- –ü–æ–∫–∞–∂–∏ —Å—Ç–∞–∫–∞–Ω **GAZP** (depth=15) ‚Äî VISUALIZE orderbook.\n"
            "- –¢–∞–±–ª–∏—Ü–µ–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ **YNDX** ‚Äî VISUALIZE table."
        )

    # –ò—Å—Ç–æ—Ä–∏—è
    if "messages" not in st.session_state:
        st.session_state.messages = []  # —ç–ª–µ–º–µ–Ω—Ç—ã: {"role": "...", "content": str, "viz_spec"?: dict}

    for msg in st.session_state.messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])
            if msg.get("viz_spec"):
                render_visualization(msg["viz_spec"])
            else:
                try:
                    _, spec = _parse_or_extract_visual_spec(msg["content"])
                    if spec:
                        render_visualization(spec)
                except Exception:
                    pass

    # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_text := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å‚Ä¶"):
        disp_user, user_spec = _parse_or_extract_visual_spec(user_text)
        st.session_state.messages.append(
            {"role": "user", "content": disp_user, **({"viz_spec": user_spec} if user_spec else {})}
        )
        with st.chat_message("user"):
            st.markdown(disp_user)
            if user_spec:
                render_visualization(user_spec)

        # –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç ‚Üí MCP Agent
        final_prompt = user_text
        if use_system_prompt:
            final_prompt = f"{build_system_prompt().strip()}\n\n–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:\n{user_text}"

        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é‚Ä¶"):
            try:
                async with httpx.AsyncClient(timeout=180) as client:
                    resp = await client.post(mcp_url, json={"prompt": final_prompt})
                    resp.raise_for_status()
                assistant_text = _extract_text_from_response(resp)

                display_text, viz_spec = _parse_or_extract_visual_spec(assistant_text)
                st.markdown(display_text)
                if viz_spec:
                    render_visualization(viz_spec)

                st.session_state.messages.append(
                    {"role": "assistant", "content": display_text, **({"viz_spec": viz_spec} if viz_spec else {})}
                )

            except httpx.HTTPStatusError as e:
                msg = f"HTTP {e.response.status_code} –æ—Ç MCP: {e.response.text}"
                st.error(msg)
                st.session_state.messages.append({"role": "assistant", "content": msg})
            except httpx.RequestError as e:
                msg = f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–æ MCP: {e}"
                st.error(msg)
                st.session_state.messages.append({"role": "assistant", "content": msg})
            except Exception as e:
                msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e!r}"
                st.error(msg)
                st.session_state.messages.append({"role": "assistant", "content": msg})


if __name__ == "__main__":
    asyncio.run(main())
