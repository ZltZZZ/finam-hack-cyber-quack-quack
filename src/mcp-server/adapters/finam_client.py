import httpx
from typing import Dict, Optional, Union, Any
import asyncio
from datetime import datetime, timedelta
import jwt
from .models import *
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class FinamApiClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Finam —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π."""
    
    def __init__(self, secret_token: str, base_url: str = "https://api.finam.ru", timeout: float = 30.0):
        self.base_url = base_url.rstrip('/')
        self.timeout = timeout
        self._token = None
        self._api_secret = secret_token
        self._token_expires_at = None
        self._client = None

    async def __aenter__(self):
        self._client = httpx.AsyncClient()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self._client:
            await self._client.aclose()
            
    def set_api_secret(self, api_secret: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        self._api_secret = api_secret
        self._token = None
        self._token_expires_at = None
        
    def set_token(self, token: str):
        """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞."""
        self._token = token
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            decoded = jwt.decode(token, options={"verify_signature": False})
            if 'exp' in decoded:
                self._token_expires_at = datetime.fromtimestamp(decoded['exp'])
        except:
            self._token_expires_at = None
            
    def _get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤."""
        headers = {"Content-Type": "application/json"}
        if self._token:
            headers["Authorization"] = f"{self._token}"
        return headers

    def _is_token_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (—Å –∑–∞–ø–∞—Å–æ–º –≤ 1 –º–∏–Ω—É—Ç—É)."""
        if not self._token_expires_at:
            return True
        return datetime.now() + timedelta(minutes=1) >= self._token_expires_at

    async def _ensure_authenticated(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
        if not self._api_secret:
            raise ValueError("API secret is not set. Call set_api_secret() first.")
            
        if not self._token or self._is_token_expired():
            await self._authenticate()

    async def _authenticate(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω."""
        if not self._api_secret:
            raise ValueError("API secret is required for authentication")
            
        url = f"{self.base_url}/v1/sessions"
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json={"secret": self._api_secret})
            response.raise_for_status()
            auth_response = AuthResponse(**response.json())
            
        self._token = auth_response.token
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            decoded = jwt.decode(self._token, options={"verify_signature": False})
            if 'exp' in decoded:
                self._token_expires_at = datetime.fromtimestamp(decoded['exp'])
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –∫–∞–∫ None
            self._token_expires_at = None

    async def _make_request(self, method: str, url: str, **kwargs) -> Union[httpx.Response, Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            await self._ensure_authenticated()
            
            headers = self._get_headers()
            if 'headers' in kwargs:
                headers.update(kwargs['headers'])
            kwargs['headers'] = headers
            
            max_retries = 2
            for attempt in range(max_retries):
                try:
                    async with httpx.AsyncClient() as client:
                        logging.info(f"MAKING REQUEST: {method} {url}")
                        print(f"üîç Headers: { {k: v for k, v in headers.items() if k != 'Authorization'} }")
                        print(f"Args: {kwargs}")
                        
                        response = await client.request(method, url, **kwargs)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        print(f"üîç Response status: {response.status_code}")
                    
                        response.raise_for_status()
                        return response
                        
                except httpx.HTTPStatusError as e:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è 
                    print(f"üö® HTTPStatusError: {e}")
                    print(f"üö® Request URL: {e.request.url}")
                    print(f"üö® Response status: {e.response.status_code}")
                    
                    

                    try:
                        error_detail = e.response.json()
                        print(f"üö® Error details: {error_detail}")
                    except:
                        error_text = e.response.text
                        print(f"üö® Error text: {error_text}")

                    if e.response.status_code == 401 and attempt == 0:
                        print("üîÑ Token expired, refreshing and retrying...")
                        self._token = None
                        await self._ensure_authenticated()
                        continue
                    
                    return {'status_code': e.response.status_code,'error': e.response.text}
                    
                except Exception as e:
                    print(f"üö® Unexpected error: {e}")
                    print(f"üö® Error type: {type(e)}")
                    return {'status_code': -1,'error': str(e)}

            return {'status_code': -1, 'error': 'Authentication failed after retries. Service unavaileble.'}
        except Exception as e:
            return {'status_code': -1, 'error': str(e)}

    def _prepare_response(self, response: Union[httpx.Response, Dict[str, Any]], response_model: Any) -> Union[Any, ErrorResponse]:
        if not isinstance(response, httpx.Response):
            response = ErrorResponse(**response)
        else:
            try:
                response = response_model(**response.json())
            except Exception as e:
                response = ErrorResponse(status_code=-1, error=str(e))

        return response
            
    
    async def token_details(self) -> Union[TokenDetailsResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ —Å–µ—Å—Å–∏–∏."""
        if not self._token or self._is_token_expired():
            try:
                await self._authenticate()
            except Exception as e:
                return ErrorResponse(status_code=-1, error="Authentication error. Service Unavailable.")
            
        url = f"{self.base_url}/v1/sessions/details"
        request = TokenDetailsRequest(token=self._token)
        response = await self._make_request("POST", url, json=request.model_dump())
        return self._prepare_response(response, TokenDetailsResponse)

    # ===== –ê–ö–ö–ê–£–ù–¢–´ =====
    
    async def get_account(self, request: GetAccountRequest) -> Union[GetAccountResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."""
        url = f"{self.base_url}/v1/accounts/{request.account_id}"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, GetAccountResponse)
    
    async def get_trades(self, request: TradesRequest) -> GetTradesResponse:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞."""
        url = f"{self.base_url}/v1/accounts/{request.account_id}/trades"
        params = {}
        if request.limit:
            params["limit"] = request.limit
        if request.interval:
            params.update({
                "interval.start_time": request.interval.start_time,
                "interval.end_time": request.interval.end_time
            })
            
        response = await self._make_request("GET", url, params=params)
        return self._prepare_response(response, GetTradesResponse)
    
    async def get_transactions(self, request: TransactionsRequest) -> Union[GetTransactionsResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞."""
        url = f"{self.base_url}/v1/accounts/{request.account_id}/transactions"
        params = {}
        if request.limit:
            params["limit"] = request.limit
        if request.interval:
            params.update({
                "interval.start_time": request.interval.start_time,
                "interval.end_time": request.interval.end_time
            })
            
        response = await self._make_request("GET", url, params=params)
        return self._prepare_response(response, GetTransactionsResponse)

    # ===== –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ =====
    
    async def get_exchanges(self) -> Union[GetExchangesResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ä–∂."""
        url = f"{self.base_url}/v1/exchanges"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, GetExchangesResponse)
    
    async def get_assets(self) -> GetAssetsResponse:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        url = f"{self.base_url}/v1/assets"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, GetAssetsResponse)
    
    async def get_asset(self, request: GetAssetRequest) -> Union[GetAssetResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."""
        url = f"{self.base_url}/v1/assets/{request.symbol}/"
        params = {}
        if request.account_id:
            params["account_id"] = request.account_id
            
        response = await self._make_request("GET", url, params=params)
        return self._prepare_response(response, GetAssetResponse)
    
    async def get_asset_params(self, request: GetAssetParamsRequest) -> Union[GetAssetParamsResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."""
        url = f"{self.base_url}/v1/assets/{request.symbol}/params"
        params = {}
        if request.account_id:
            params["account_id"] = request.account_id
            
        response = await self._make_request("GET", url, params=params)
        return self._prepare_response(response, GetAssetParamsResponse)
    
    async def get_options_chain(self, request: OptionsChainRequest) -> Union[OptionsChainResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –æ–ø—Ü–∏–æ–Ω–æ–≤ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞."""
        url = f"{self.base_url}/v1/assets/{request.underlying_symbol}/options"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, OptionsChainResponse)
    
    async def get_schedule(self, request: ScheduleRequest) -> Union[ScheduleResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        url = f"{self.base_url}/v1/assets/{request.symbol}/schedule"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, ScheduleResponse)
    
    async def get_clock(self) -> ClockResponse:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
        url = f"{self.base_url}/v1/assets/clock"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, ClockResponse)

    # ===== –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï =====
    
    async def get_bars(self, request: BarsRequest) -> Union[BarsResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏)."""
        url = f"{self.base_url}/v1/instruments/{request.symbol}/bars"
        params = {
            "timeframe": request.timeframe.value,
            "interval.start_time": request.interval.start_time,
            "interval.end_time": request.interval.end_time
        }
        
        response = await self._make_request("GET", url, params=params)
        return self._prepare_response(response, BarsResponse)
    
    async def get_last_quote(self, request: QuoteRequest) -> Union[LastQuoteResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."""
        url = f"{self.base_url}/v1/instruments/{request.symbol}/quotes/latest"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, LastQuoteResponse)
    
    async def get_orderbook(self, request: OrderBookRequest) -> Union[OrderBookResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."""
        url = f"{self.base_url}/v1/instruments/{request.symbol}/orderbook"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, OrderBookResponse)
    
    async def get_latest_trades(self, request: LatestTradesRequest) -> Union[LatestTradesResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."""
        url = f"{self.base_url}/v1/instruments/{request.symbol}/trades/latest"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, LatestTradesResponse)

    # ===== –ó–ê–Ø–í–ö–ò =====


    
    async def place_order(self, account_id: str, request: PlaceOrderRequest) -> Union[PlaceOrderResponse, ErrorResponse]:
        """–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–∏—Ä–∂–µ–≤–æ–π –∑–∞—è–≤–∫–∏."""
        url = f"{self.base_url}/v1/accounts/{account_id}/orders"
        print(request.model_dump_json())
        response = await self._make_request("POST", url, json=request.model_dump())
        return self._prepare_response(response, PlaceOrderResponse)
    
    async def cancel_order(self, request: CancelOrderRequest) -> Union[CancelOrderResponse, ErrorResponse]:
        """–û—Ç–º–µ–Ω–∞ –±–∏—Ä–∂–µ–≤–æ–π –∑–∞—è–≤–∫–∏."""
        print(request.model_dump_json())
        url = f"{self.base_url}/v1/accounts/{request.account_id}/orders/{request.order_id}"
        response = await self._make_request("DELETE", url)
        return self._prepare_response(response, CancelOrderResponse)
    
    async def get_orders(self, request: OrdersRequest) -> Union[GetOrdersResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
        url = f"{self.base_url}/v1/accounts/{request.account_id}/orders"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, GetOrdersResponse)
    
    async def get_order(self, request: GetOrderRequest) -> Union[GetOrderResponse, ErrorResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ä–¥–µ—Ä–µ."""
        url = f"{self.base_url}/v1/accounts/{request.account_id}/orders/{request.order_id}"
        response = await self._make_request("GET", url)
        return self._prepare_response(response, GetOrderResponse)


# ===== –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø =====

async def tests():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤."""
    from datetime import datetime, timedelta
    
    async with FinamApiClient(secret_token="eyJraWQiOiJlZjk0NzA1Ni0xZDRjLTRiYTUtYTA2Yi1iYTUzZTM5MGE0MTEiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhcmVhIjoidHQiLCJwYXJlbnQiOiI5YmNlM2EyYy0xMDk2LTQ5NjMtODQzZC1lMzIwNjI2M2IxN2EiLCJhcGlUb2tlblByb3BlcnRpZXMiOiJINHNJQUFBQUFBQUFfMjFVTzBfY1FCQUdmQmVRclVpd0NDSlJraVpDQ29JOFJXbnZyZThjYm0yemE0TXZqWFZ3TGxDT08zS1BSS1RNLTFtNGlCUXBhWkltWlFyLVM2cFU2Zk1mTWp1N0lBaHB2bTkyZGg0N251OXU1dmozNTU5ZmJwS3BHV3ZwUjJWbWFubGlaZHF1WGhXZXFHbURlZ0tOblIwYXIxeXlLeTdQSW1SQk04V2VtMGprYmU0clpsbk1GUWNzcXlQN0xOV2NZaHdQSk9aRlVVS1JZLUVpSjlRenpBMXZLWTZEa0JvT0REY05ZNTFZMWpGZUpMcXVTRFZuTHBlYUpUT3NfVjdFTll0VWM2cnZxZWNiVGpRenFwbnJlNVlJWkYtX042dTdPcTZ4NlJ2R2ViTm1MZFJzOHBxbVh6UFNmdTdXa0VOWHZ5X1U4MlpoM1p6TnU4T1c4YmYwT1haMWY5bGdoblVfdWFQblNqYWxXbFR1aFpTaVFiMEFNM0lLbTBHSGFNVm9zRlI0YUhEdTNVY2pqQVZ1TlpjMFdLbmFWaTUxcEl4TmdJdzc2MmdrZ3NrYmt4UGZKcWZzaWFXUGxSbUxXQzdMQUNSVHNLVUFqaUFMZ0MwRjZnSS1NcWw0X1Y2SFZCVU9pUVdmV3dFRTBFWUF3SmtDeUtUYmpFelg3Z1ZoVFpWbGFVWlFVMlRhOTNuT3hUcXAtRUhvRWxzaHoydHAwaUpWUDRMMUU4dUhWbE0tWk5XWklGYkRoNUt3RldJRkxBVklJYUpKV3dDcVYxTTlDM1lCUUNHRFE3TUs1eTQ4aFl0dFlzRjJBTGdDR1NqZ0NtQTZXSXNDdENSQkdSTXJraTVCQlNOeVJJaUFsUkVVTUdLQTJFU0VadkdtWEVlOGlYZ0x3dUZKcUdkaUNRb2ZSaVFlcVlvVWZvSEVrbTRFd0tRQ3VKSjFxQUJ3SGN4R0F5Q0FKSm5BSUNBSFlpVTFtRHBwYnBOS0FqT0JHVUdKcEFVbFVoZXVkOVRzR2FSVWxGcUkxb3c2SkQ0aXpKVlROWWFTRHRIQ0lWbzI0S3ZYWEtLbFE3UkFpRmJGOHNTcExuNVo4SGR5N1ducFBDdWQ1Nlh6b25SZWxzNnIwbmxkT205SzUyM3B2Q3VkOTZYem9YU09QXzJaTkluZkxmdXJaUzg4SFBkSHhXcTNQUnpsbzBHN1UtVERfU2VGdlhqQnZkY2Y5MGIyM0JuX28zNTNmRkRZczJkZDdlNzROUGx3c0w5WG5DMTY1YUpmVnlWbkwwelp1WE0tckh0WnUzYjNPeXJvNU5nZVBzRGp2RDcyRDR0ZXZ0OGJGWU5pT0RweG1wUjgxQi0xdXljejc0NlA4djZnVXd6TUstYlAxVE94WnBaaDBlMy1MX2p4N1J1ckItMlROeTlDWHhpcmZaVHZ0WHVkYnJGcV9Bc1hfRGpQM01YSTJYLUR5S1M5Zk9uTzJ0ckczWTJfWUoweTBEd0dBQUEiLCJzY29udGV4dCI6IkNoQUlCeElNZEhKaFpHVmZZWEJwWDNKMUNpZ0lBeElrTmpJeE9UVTROemd0Wm1ZeU15MDBZVEl4TFdJNFpqY3ROakUwTURjM1pUZ3lOakptQ2dRSUJSSUFDZ2tJQUJJRmFIUnRiRFVLS0FnQ0VpUXpOalUzWlRRNE1TMWhNRFppTFRFeFpqQXRZalZtWlMxaFptWTVPR00yTVRreE1XSUtCUWdJRWdFekNnUUlDUklBQ2drSUNoSUZNUzQyTGpRS0tBZ0VFaVJsWmprME56QTFOaTB4WkRSakxUUmlZVFV0WVRBMllpMWlZVFV6WlRNNU1HRTBNVEV5VFFvVlZGSkJSRVZCVUVsZlMxSkJWRTlUWDFSUFMwVk9FQUVZQVNBQktnZEZSRTlZWDBSQ09nSUlBMG9UQ2dNSWh3Y1NCUWlIb1o0QkdnVUloNWJEQVZnQllBRm9BWElHVkhoQmRYUm8iLCJ6aXBwZWQiOnRydWUsImNyZWF0ZWQiOiIxNzU5NTI0OTQ0IiwicmVuZXdFeHAiOiIxNzYwMDQzNjU5Iiwic2VzcyI6Ikg0c0lBQUFBQUFBQS93WEJzUXFETUJRRlVBcDJFVno4aE9MNklPOG1rWGZIQkp1cE5PTGtWaUxpUi9wMVBlZjE2U2RDNFU4N0JMUW93VjBVdGxQRm8ybHp3RHpiZFV5S1JOaENpZEZCUXNwRjZOOFFocEswbU05eDRmMFkrdWZ2dTI1MTdHcXUreDlrQ3lLQlhnQUFBQSIsImlzcyI6InR4c2VydmVyIiwia2V5SWQiOiJlZjk0NzA1Ni0xZDRjLTRiYTUtYTA2Yi1iYTUzZTM5MGE0MTEiLCJ0eXBlIjoiQXBpVG9rZW4iLCJzZWNyZXRzIjoidXJWTmIxOUU0RklaN2E0TVhMYmRPQT09Iiwic2NvcGUiOiIiLCJ0c3RlcCI6ImZhbHNlIiwic3BpblJlcSI6ZmFsc2UsImV4cCI6MTc2MDA0MzU5OSwic3BpbkV4cCI6IjE3NjAwNDM2NTkiLCJqdGkiOiI2MjE5NTg3OC1mZjIzLTRhMjEtYjhmNy02MTQwNzdlODI2MmYifQ.DeW6-fm0xdR0JORUsG4W7BnAoNDIXKeFsgkfnf-ABtUjuoVl6V1ssKnx2To4lI-_PLzOLjgzxlplak1ONUq94Q") as api:
        # ===== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø =====
        print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        token_info = await api.token_details()
        if isinstance(token_info, ErrorResponse):
            print(f"–û—à–∏–±–∫–∞. status_code: {token_info.status_code}, error: {token_info.error}")
            return
        
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
        account_id = token_info.model_dump()['account_ids'][0]
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç: {account_id}")

        # ===== –ê–ö–ö–ê–£–ù–¢–´ =====
        print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")
        
        request = GetAccountRequest(account_id=account_id)
        account_info = await api.get_account(request)
        if isinstance(account_info, ErrorResponse):
            print(f"–û—à–∏–±–∫–∞. status_code: {account_info.status_code}, error: {account_info.error}")
            return
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
        # print(account_info.model_dump_json(indent=2))

        end_time = datetime.now()
        start_time = end_time - timedelta(days=7)
        request = TransactionsRequest(account_id=account_id, interval=Interval(start_time=start_time.isoformat(timespec="seconds") + "Z", end_time=end_time.isoformat(timespec="seconds") + "Z"))
        transactions = await api.get_transactions(request)
        if isinstance(transactions, ErrorResponse):
            print(f"–û—à–∏–±–∫–∞. status_code: {transactions.status_code}, error: {transactions.error}")
        else:
            print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions.transactions)}")

        end_time = datetime.now()
        start_time = end_time - timedelta(days=7)
        request = TradesRequest(account_id=account_id, interval=Interval(start_time=start_time.isoformat(timespec="seconds") + "Z", end_time=end_time.isoformat(timespec="seconds") + "Z"))
        trades = await api.get_trades(request)
        if isinstance(trades, ErrorResponse):
            print(f"–û—à–∏–±–∫–∞. status_code: {trades.status_code}, error: {trades.error}")
        else:
            print("‚úÖ –°–¥–µ–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(trades.trades)}")

        # ===== –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ =====
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏...")
        
        exchanges = await api.get_exchanges()
        if isinstance(exchanges, ErrorResponse):
            print(f"–û—à–∏–±–∫–∞. status_code: {exchanges.status_code}, error: {exchanges.error}")
            return
        print("‚úÖ –ë–∏—Ä–∂–∏ –ø–æ–ª—É—á–µ–Ω—ã")
        print(f"üèõÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–∂: {len(exchanges.exchanges)}")

        assets = await api.get_assets()
        if isinstance(assets, ErrorResponse):
            print(f"–û—à–∏–±–∫–∞. status_code: {assets.status_code}, error: {assets.error}")
            return
        print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(assets.assets)}")

        # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if len(assets.assets) >= 3:
            # –ü–µ—Ä–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            ticker1 = assets.assets[0].ticker
            mic1 = assets.assets[0].mic
            symbol1 = ticker1 + "@" + mic1
            
            # –í—Ç–æ—Ä–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            ticker2 = assets.assets[1].ticker
            mic2 = assets.assets[1].mic
            symbol2 = ticker2 + "@" + mic2
            
            # –¢—Ä–µ—Ç–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            ticker3 = assets.assets[2].ticker if len(assets.assets) > 2 else ticker1
            mic3 = assets.assets[2].mic if len(assets.assets) > 2 else mic1
            symbol3 = ticker3 + "@" + mic3

            print(f"üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {symbol1}, {symbol2}, {symbol3}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
            request = GetAssetRequest(symbol=symbol1, account_id=account_id)
            asset = await api.get_asset(request)
            if isinstance(asset, ErrorResponse):
                print(f"–û—à–∏–±–∫–∞. status_code: {asset.status_code}, error: {asset.error}")
                return
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"üìã –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {asset.name}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            request = GetAssetParamsRequest(symbol=symbol1, account_id=account_id)
            params = await api.get_asset_params(request)
            if isinstance(params, ErrorResponse):
                print(f"–û—à–∏–±–∫–∞. status_code: {params.status_code}, error: {params.error}")
                return
            print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"üîÑ –¢–æ—Ä–≥—É–µ–º—ã–π: {params.tradeable}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            request = ScheduleRequest(symbol=symbol1)
            schedule = await api.get_schedule(request)
            if isinstance(schedule, ErrorResponse):
                print(f"–û—à–∏–±–∫–∞. status_code: {schedule.status_code}, error: {schedule.error}")
                return
            print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
            print(f"‚è∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {len(schedule.sessions)}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            clock = await api.get_clock()
            if isinstance(clock, ErrorResponse):
                print(f"–û—à–∏–±–∫–∞. status_code: {clock.status_code}, error: {clock.error}")
                return
            print("‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–æ")
            print(f"üïí –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {clock.timestamp}")

        # ===== –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï =====
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        if len(assets.assets) >= 2:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–±–∞—Ä—ã)
            from datetime import datetime, timedelta
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            end_time = datetime.now()
            start_time = end_time - timedelta(days=7)
            
            request = BarsRequest(
                symbol=symbol1,
                timeframe=TimeFrame.TIME_FRAME_D,  # –î–Ω–µ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                interval=Interval(
                    start_time=start_time.isoformat() + "Z",
                    end_time=end_time.isoformat() + "Z"
                )
            )
            bars = await api.get_bars(request)
            if isinstance(bars, ErrorResponse):
                print(f"–û—à–∏–±–∫–∞. status_code: {bars.status_code}, error: {bars.error}")
                return
            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤: {len(bars.bars)}")
            
            if bars.bars:
                print(f"üìÖ –ü–µ—Ä–≤—ã–π –±–∞—Ä: {bars.bars[0].timestamp}")
                print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä: {bars.bars[-1].timestamp}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É
            request = QuoteRequest(symbol=symbol1)
            last_quote = await api.get_last_quote(request)
            if isinstance(last_quote, ErrorResponse):
                print(f"–û—à–∏–±–∫–∞. status_code: {last_quote.status_code}, error: {last_quote.error}")
                return
            print("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {last_quote.quote.last.value}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω
            request = OrderBookRequest(symbol=symbol1)
            orderbook = await api.get_orderbook(request)
            if isinstance(orderbook, ErrorResponse):
                print(f"–û—à–∏–±–∫–∞. status_code: {orderbook.status_code}, error: {orderbook.error}")
                return
            print("‚úÖ –°—Ç–∞–∫–∞–Ω –ø–æ–ª—É—á–µ–Ω")
            print(f"üìä –£—Ä–æ–≤–Ω–µ–π –≤ —Å—Ç–∞–∫–∞–Ω–µ: {len(orderbook.orderbook.rows)}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            request = LatestTradesRequest(symbol=symbol1)
            latest_trades = await api.get_latest_trades(request)
            if isinstance(latest_trades, ErrorResponse):
                print(f"–û—à–∏–±–∫–∞. status_code: {latest_trades.status_code}, error: {latest_trades.error}")
                if latest_trades.status_code != 404:
                    return
            else:
                print("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                print(f"üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(latest_trades.trades)}")

        # ===== –û–ü–¶–ò–û–ù–´ =====
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ü–∏–æ–Ω–∞–º–∏...")
        
        # –ò—â–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤ (–∞–∫—Ü–∏–∏)
        underlying_assets = [asset for asset in assets.assets if "Option" in asset.name or "Options" in asset.name]
        if underlying_assets:
            underlying_symbol = underlying_assets[0].ticker + "@" + underlying_assets[0].mic
            try:
                request = OptionsChainRequest(underlying_symbol=underlying_symbol)
                options_chain = await api.get_options_chain(request)
                if isinstance(options_chain, ErrorResponse):
                    print(f"–û—à–∏–±–∫–∞. status_code: {options_chain.status_code}, error: {options_chain.error}")
                    return
                print("‚úÖ –¶–µ–ø–æ—á–∫–∞ –æ–ø—Ü–∏–æ–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞")
                print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–æ–Ω–æ–≤: {len(options_chain.options)}")
                
                if options_chain.options:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –æ–ø—Ü–∏–æ–Ω–µ
                    first_option = options_chain.options[0]
                    print(f"üìä –ü—Ä–∏–º–µ—Ä –æ–ø—Ü–∏–æ–Ω–∞: {first_option.symbol}, —Ç–∏–ø: {first_option.type}, —Å—Ç—Ä–∞–π–∫: {first_option.strike.value}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –æ–ø—Ü–∏–æ–Ω–æ–≤ –¥–ª—è {underlying_symbol}: {e}")

        # ===== –ó–ê–Ø–í–ö–ò =====
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏...")

        # ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–°–¢–ê–í–õ–ï–ù–ò–Ø –ò –û–¢–ú–ï–ù–´ –ó–ê–Ø–í–û–ö =====
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–æ–∫...")
        
        if len(assets.assets) >= 1:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
            test_symbol = assets.assets[0].ticker + "@" + assets.assets[0].mic
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            asset_info = await api.get_asset(GetAssetRequest(symbol=test_symbol, account_id=account_id))
            if isinstance(asset_info, ErrorResponse):
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {asset_info.error}")
            else:
                print(f"üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {asset_info.name}")
                
                # –¢–µ—Å—Ç 1: –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞—è–≤–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫)
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)
                    place_request = PlaceOrderRequest(
                        symbol=test_symbol,
                        quantity=DecimalValue(value="1"),  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        side=Side.SIDE_BUY,
                        type=OrderType.ORDER_TYPE_LIMIT,
                        time_in_force=TimeInForce.TIME_IN_FORCE_DAY,
                        limit_price=DecimalValue(value="0.01")  # –ù–µ—Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
                    )
                    
                    place_result = await api.place_order(account_id, place_request)
                    
                    if isinstance(place_result, ErrorResponse):
                        print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {place_result.error}")
                        
                        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤—Å–µ –∂–µ –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º –µ–µ –æ—Ç–º–µ–Ω–∏—Ç—å
                        if "order_id" in str(place_result.error):
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å order_id –∏–∑ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                            import re
                            order_id_match = re.search(r'order_id[\'"]?\s*:\s*[\'"]?([^\'",}\s]+)', str(place_result.error))
                            if order_id_match:
                                order_id = order_id_match.group(1)
                                cancel_request = CancelOrderRequest(
                                    account_id=account_id,
                                    order_id=order_id
                                )
                                cancel_result = await api.cancel_order(cancel_request)
                                if isinstance(cancel_result, ErrorResponse):
                                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {cancel_result.error}")
                                else:
                                    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    else:
                        print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
                        print(f"üìù ID –∑–∞—è–≤–∫–∏: {place_result.order_id}")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                        cancel_request = CancelOrderRequest(
                            account_id=account_id,
                            order_id=place_result.order_id
                        )
                        cancel_result = await api.cancel_order(cancel_request)
                        
                        if isinstance(cancel_result, ErrorResponse):
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏: {cancel_result.error}")
                        else:
                            print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                            print(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: {cancel_result.status}")
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
                
                # –¢–µ—Å—Ç 2: –ü—Ä–æ–±—É–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
                print("\nüß™ –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏...")
                fake_cancel_request = CancelOrderRequest(
                    account_id=account_id,
                    order_id="NON_EXISTENT_ORDER_12345"
                )
                fake_cancel_result = await api.cancel_order(fake_cancel_request)
                
                if isinstance(fake_cancel_result, ErrorResponse):
                    print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏: {fake_cancel_result.error}")
                else:
                    print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏")
                
                # –¢–µ—Å—Ç 3: –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–µ
                print("\nüß™ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏...")
                fake_get_request = GetOrderRequest(
                    account_id=account_id,
                    order_id="NON_EXISTENT_ORDER_12345"
                )
                fake_get_result = await api.get_order(fake_get_request)
                
                if isinstance(fake_get_result, ErrorResponse):
                    print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏: {fake_get_result.error}")
                else:
                    print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏")

        # ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ó–ê–Ø–í–û–ö =====
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫...")
        
        if len(assets.assets) >= 1:
            test_symbol = assets.assets[0].ticker + "@" + assets.assets[0].mic
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω
            quote_info = await api.get_last_quote(QuoteRequest(symbol=test_symbol))
            if not isinstance(quote_info, ErrorResponse) and hasattr(quote_info.quote, 'last'):
                current_price = float(quote_info.quote.last.value)
                print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {test_symbol}: {current_price}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
                order_types_to_test = [
                    ("–õ–∏–º–∏—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞", OrderType.ORDER_TYPE_LIMIT),
                    ("–†—ã–Ω–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞", OrderType.ORDER_TYPE_MARKET),
                ]
                
                for order_name, order_type in order_types_to_test:
                    try:
                        if order_type == OrderType.ORDER_TYPE_LIMIT:
                            test_order = PlaceOrderRequest(
                                symbol=test_symbol,
                                quantity=DecimalValue(value="1"),
                                side=Side.SIDE_BUY,
                                type=order_type,
                                time_in_force=TimeInForce.TIME_IN_FORCE_DAY,
                                limit_price=DecimalValue(value=str(current_price * 0.9))  # 10% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                            )

                            place_result = await api.place_order(account_id, test_order)
                    
                            if isinstance(place_result, ErrorResponse):
                                print(f"–û—à–∏–±–∫–∞. status_code: {place_result.status_code}, error: {place_result.error}")
                        else:  # MARKET order
                            test_order = PlaceOrderRequest(
                                symbol=test_symbol,
                                quantity=DecimalValue(value="1"),
                                side=Side.SIDE_BUY,
                                type=order_type,
                                time_in_force=TimeInForce.TIME_IN_FORCE_DAY
                            )
                        
                            place_result = await api.place_order(account_id, test_order)
                    
                            if isinstance(place_result, ErrorResponse):
                                print(f"–û—à–∏–±–∫–∞. status_code: {place_result.status_code}, error: {place_result.error}")
                        
                        print(f"‚úÖ {order_name}: –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {order_name}: {e}")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        try:
            request = OrdersRequest(account_id=account_id)
            orders = await api.get_orders(request)
            if isinstance(orders, ErrorResponse):
                    print(f"–û—à–∏–±–∫–∞. status_code: {orders.status_code}, error: {orders.error}")
            else:
                print("‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω")
                print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {len(orders.orders)}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π
            if orders.orders:
                first_order = orders.orders[0]
                request = GetOrderRequest(
                    account_id=account_id,
                    order_id=first_order.order_id
                )
                order_detail = await api.get_order(request)
                if isinstance(order_detail, ErrorResponse):
                    print(f"–û—à–∏–±–∫–∞. status_code: {order_detail.status_code}, error: {order_detail.error}")
                else:
                    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –ø–æ–ª—É—á–µ–Ω–∞")
                    print(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {order_detail.status}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞—è–≤–∫–∞–º–∏: {e}")

        # ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í =====
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        asset_types = {}
        for asset in assets.assets:
            asset_type = asset.type
            if asset_type not in asset_types:
                asset_types[asset_type] = []
            asset_types[asset_type].append(asset)
        
        print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        for asset_type, type_assets in asset_types.items():
            print(f"  - {asset_type}: {len(type_assets)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            if type_assets:
                test_asset = type_assets[0]
                test_symbol = test_asset.ticker + "@" + test_asset.mic
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    request = GetAssetRequest(symbol=test_symbol, account_id=account_id)
                    asset_info = await api.get_asset(request)
                    if isinstance(asset_info, ErrorResponse):
                        print(f"–û—à–∏–±–∫–∞. status_code: {asset_info.status_code}, error: {asset_info.error}")
                    else:
                        print(f"    ‚úÖ {asset_info.name}: OK")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    request = GetAssetParamsRequest(symbol=test_symbol, account_id=account_id)
                    asset_params = await api.get_asset_params(request)
                    if isinstance(asset_params, ErrorResponse):
                        print(f"–û—à–∏–±–∫–∞. status_code: {asset_params.status_code}, error: {asset_params.error}")
                    else:
                        print(f"    ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ç–æ—Ä–≥—É–µ–º—ã–π={asset_params.tradeable}")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {asset_info.name}: {e}")

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        # ===== –°–í–û–î–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø =====
        print("\nüìä –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç: {account_id}")
        print(f"‚Ä¢ –ë–∏—Ä–∂: {len(exchanges.exchanges)}")
        print(f"‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(assets.assets)}")
        print(f"‚Ä¢ –¢–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(asset_types)}")
        
        if 'trades' in locals():
            print(f"‚Ä¢ –°–¥–µ–ª–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(trades.trades)}")
        if 'transactions' in locals():
            print(f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(transactions.transactions)}")
        if 'orders' in locals():
            print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(orders.orders)}")


if __name__ == "__main__":
    asyncio.run(tests())